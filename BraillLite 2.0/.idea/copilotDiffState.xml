<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/BraillLite-2.0/src/main/java/com/example/BraillLite20/Controllers/UserController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BraillLite-2.0/src/main/java/com/example/BraillLite20/Controllers/UserController.java" />
              <option name="originalContent" value="package com.example.BraillLite20.Controllers;&#10;&#10;import com.example.BraillLite20.DTOs.RequestDTO.UserDTO;&#10;import com.example.BraillLite20.DTOs.ResponseDTO.ResponseDTO;&#10;import com.example.BraillLite20.Repositories.UserRepo;&#10;import com.example.BraillLite20.Service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;public class UserController {&#10;&#10;    @Autowired&#10;    private UserRepo userRepo;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;&#10;    @PostMapping(&quot;/users/register&quot;)&#10;    public ResponseEntity&lt;ResponseDTO&gt; Register(UserDTO userDTO){&#10;        return new ResponseEntity&lt;&gt;(userService.signUp(userDTO), HttpStatus.CREATED);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.BraillLite20.Controllers;&#10;&#10;import com.example.BraillLite20.DTOs.RequestDTO.UserDTO;&#10;import com.example.BraillLite20.DTOs.ResponseDTO.ResponseDTO;&#10;import com.example.BraillLite20.Repositories.UserRepo;&#10;import com.example.BraillLite20.Service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.PostMapping;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api&quot;)&#10;public class UserController {&#10;&#10;    @Autowired&#10;    private UserRepo userRepo;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;&#10;    @PostMapping(&quot;/users/register&quot;)&#10;    public ResponseEntity&lt;ResponseDTO&gt; Register(UserDTO userDTO) {&#10;        if (userDTO.getPassword() == null || userDTO.getPassword().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Password cannot be null or empty&quot;);&#10;        }&#10;        return new ResponseEntity&lt;&gt;(userService.signUp(userDTO), HttpStatus.CREATED);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/BraillLite-2.0/src/main/java/com/example/BraillLite20/Service/UserService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/BraillLite-2.0/src/main/java/com/example/BraillLite20/Service/UserService.java" />
              <option name="originalContent" value="package com.example.BraillLite20.Service;&#10;&#10;import com.example.BraillLite20.DTOs.RequestDTO.UserDTO;&#10;import com.example.BraillLite20.DTOs.ResponseDTO.ResponseDTO;&#10;import com.example.BraillLite20.Entity.Users;&#10;import com.example.BraillLite20.Repositories.UserRepo;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class UserService {&#10;&#10;    private final UserRepo userRepo;&#10;    private final PasswordEncoder encoder;&#10;&#10;    @Autowired&#10;    public UserService(UserRepo userRepo,PasswordEncoder encoder) {&#10;        this.userRepo = userRepo;&#10;        this.encoder=encoder;&#10;    }&#10;&#10;        public ResponseDTO signUp(UserDTO userDTO){&#10;        Optional&lt;Users&gt; userEmail = userRepo.findByEmail(userDTO.getEmail());&#10;        if(userEmail.isPresent()){&#10;            throw new IllegalStateException(&quot;Email is Already Registered&quot;);&#10;&#10;        }&#10;&#10;        Users user =userDTOToUserMapper(userDTO);&#10;        userRepo.save(user);&#10;        ResponseDTO dto = new ResponseDTO();&#10;        dto.setMessage(&quot;User Registered Successfully&quot;);&#10;        return dto;&#10;&#10;    }&#10;&#10;    public Users userDTOToUserMapper(UserDTO userDTO){&#10;    Users user = new Users();&#10;    user.setPassword(encoder.encode(userDTO.getPassword()));&#10;    user.setUsername(userDTO.getUsername());&#10;    user.setEmail(userDTO.getEmail());&#10;    user.setAddress(userDTO.getAddress());&#10;    user.setPhone(userDTO.getPhone());&#10;    user.setCreatedAt(new Timestamp(System.currentTimeMillis()));&#10;    return user;&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.BraillLite20.Service;&#10;&#10;import com.example.BraillLite20.DTOs.RequestDTO.UserDTO;&#10;import com.example.BraillLite20.DTOs.ResponseDTO.ResponseDTO;&#10;import com.example.BraillLite20.Entity.Users;&#10;import com.example.BraillLite20.Repositories.UserRepo;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.security.crypto.password.PasswordEncoder;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.sql.Timestamp;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class UserService {&#10;&#10;    private final UserRepo userRepo;&#10;    private final PasswordEncoder encoder;&#10;&#10;    @Autowired&#10;    public UserService(UserRepo userRepo,PasswordEncoder encoder) {&#10;        this.userRepo = userRepo;&#10;        this.encoder=encoder;&#10;    }&#10;&#10;        public ResponseDTO signUp(UserDTO userDTO){&#10;        Optional&lt;Users&gt; userEmail = userRepo.findByEmail(userDTO.getEmail());&#10;        if(userEmail.isPresent()){&#10;            throw new IllegalStateException(&quot;Email is Already Registered&quot;);&#10;&#10;        }&#10;&#10;        Users user =userDTOToUserMapper(userDTO);&#10;        userRepo.save(user);&#10;        ResponseDTO dto = new ResponseDTO();&#10;        dto.setMessage(&quot;User Registered Successfully&quot;);&#10;        return dto;&#10;&#10;    }&#10;&#10;    public Users userDTOToUserMapper(UserDTO userDTO) {&#10;        if (userDTO.getPassword() == null || userDTO.getPassword().isEmpty()) {&#10;            throw new IllegalArgumentException(&quot;Password cannot be null or empty&quot;);&#10;        }&#10;        Users user = new Users();&#10;        user.setPassword(encoder.encode(userDTO.getPassword()));&#10;        user.setUsername(userDTO.getUsername());&#10;        user.setEmail(userDTO.getEmail());&#10;        user.setAddress(userDTO.getAddress());&#10;        user.setPhone(userDTO.getPhone());&#10;        user.setCreatedAt(new Timestamp(System.currentTimeMillis()));&#10;        return user;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>